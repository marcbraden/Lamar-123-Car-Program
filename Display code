
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
#include <SPI.h>
#include <SD.h>

LiquidCrystal_I2C lcd(0x27,16,2);
int timeInterval=0;
int oldTime=0;
int current1=0;
int current2=0;
int voltage=0;
float velocity=0;

const int chipSelect = 10;
       
void setup() {
    lcd.init();
      lcd.backlight();
  // put your setup code here, to run once:
  attachInterrupt(digitalPinToInterrupt(2),getTimeInterval,FALLING);  //interrupts the code based on input from a pin, immediately executing a function
  //In this case, everything gets interrupted if the voltage on pin 2 falls from HIGH to LOW, at which point the function getTimeInterval will be executed.
  //The main loop resumes as soon as getTimeInterval is done.

  // Open serial communications and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }


  Serial.print("Initializing SD card...");

  // see if the card is present and can be initialized:
  if (!SD.begin(chipSelect)) {
    Serial.println("Card failed, or not present");
    // don't do anything more:
    while (1);
  }
  Serial.println("card initialized.");
}

void loop() {
if ((millis()-oldTime)>1000){
       velocity=0
}
  delay(1000);
  lcd.setCursor(4,0);
  lcd.print(velocity);
  lcd.setCursor(9,0);
  lcd.print("m/s");
  lcd.setCursor(2,1);
  current1=analogRead(A0);
  lcd.print(current1);
  lcd.setCursor(7,1);
   current2=analogRead(A1);
  lcd.print(current2);
    lcd.setCursor(11,1);
   voltage=analogRead(A2);
  lcd.print(voltage);
  // make a string for assembling the data to log:
  String dataString = "";

  // read three sensors and append to the string:
  dataString += String(velocity);
  dataString += ",";
  for (int analogPin = 0; analogPin < 3; analogPin++) {
    int sensor = analogRead(analogPin);
    dataString += String(sensor);
    if (analogPin < 2) {
      dataString += ",";
    }

  }

  // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.
  File dataFile = SD.open("datalog.txt", FILE_WRITE);

  // if the file is available, write to it:
  if (dataFile) {
    dataFile.println(dataString);
    dataFile.close();
    // print to the serial port too:
    Serial.println(dataString);
  }
  // if the file isn't open, pop up an error:
  else {
    Serial.println("error opening datalog.txt");
  }
}



// the loop routine runs over and over again forever:

void getTimeInterval(){
  timeInterval=millis()-oldTime;
  oldTime=millis();
  velocity=(157.08/(float(timeInterval)/1000));

}
